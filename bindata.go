package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _include_buildpack_bash = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x56\x5f\x4f\xeb\xb8\x13\x7d\x4e\x3e\xc5\xfc\x42\xc5\x05\xa4\xd0\x1f\xf7\xee\x13\x97\xa2\x05\xca\xdd\xad\x16\x28\x0b\xed\x13\x8b\x2a\xd7\x99\x34\x16\x6e\x9c\xb5\x1d\x0a\x62\xf9\xee\x3b\x4e\xd3\xfc\xa1\xf4\xc2\xc3\x4a\xa0\x26\x1e\xcf\xcc\x39\xe3\x33\xe3\xf8\xd3\x5c\xc8\x28\x63\xfc\x21\x2c\x9e\x76\x76\xe1\xc5\xf7\x22\xe4\x92\x69\x84\x08\x0d\xef\x05\xa7\xce\x00\x2c\x05\x96\x65\x52\x70\x66\x85\x4a\x21\x37\x22\x9d\x81\x48\x8d\x65\x52\x62\x04\x55\x1c\x13\xf8\x1e\xa6\x26\xd7\x18\x66\xcc\x26\xc6\xf7\xea\x14\x06\x6d\x9e\xc1\x31\x74\x23\x7c\xec\xa6\xb9\x94\x4d\x23\x3e\x21\xcf\x2d\xc2\x3f\x14\x35\xc2\xd4\xfa\x5e\xa6\x15\x8f\x85\xc4\xd0\x3e\x67\x68\x6a\xc3\xab\xdf\x80\x5d\x42\x78\x0f\xf8\x60\x69\xaa\xb1\x41\xac\xd5\x1c\x7e\x13\x16\xc6\x37\x17\xc4\x28\x02\x95\x39\x36\x4c\x02\x57\xf3\xb9\xb0\x56\x98\x24\xa8\xc3\xe4\x5a\xf6\x82\xce\x41\x50\x5a\xe9\xf9\x6b\x00\x29\x9b\x23\x3d\x7d\x5b\xe3\x29\x62\xb8\xbb\x83\xff\x41\xd0\x21\xbf\x00\xee\xef\xbf\x83\x4d\x30\xf5\x3d\x8f\x19\x62\x1e\x52\xe5\x88\x01\x97\x79\x84\xdd\xba\x5c\xfb\xf6\xc9\x12\xb5\x45\x42\x44\x41\x23\x8b\x5c\xd6\x32\xe1\x77\x88\x14\xb9\x7b\x6b\x6c\x57\x39\x82\xce\x72\x23\x61\xf1\x22\x95\x22\xfd\x68\xaa\xb1\xa6\xa4\xb1\xf0\x3d\xa9\x38\x51\xb3\x4c\xcf\xd0\x4e\x1c\x4a\xc2\x5d\xc5\x2a\x16\xba\x9d\x17\xc7\xe7\x30\xec\xec\x4c\x99\x41\xf7\x0c\x2e\xf4\xee\x6b\xb0\x22\x54\xe5\x68\x32\x9a\x51\x0d\xb9\xa4\x8c\x35\x92\x46\x1a\x07\x87\x47\xeb\x6b\x85\x57\x82\xfc\x41\xe5\x16\xc2\xf0\xef\x5c\xa0\x6d\x71\x20\xa7\xb0\xad\x0f\x94\x06\x5b\xf9\xc2\x30\xc2\x8c\x98\x1c\x6c\xca\xec\x88\xeb\x39\x84\x3a\x6e\x9b\xba\xfb\x33\x97\xa4\x25\x1e\x29\x8c\x7d\x4f\x39\x17\xb4\xfe\x39\x71\x4b\x03\xa1\x83\xd2\x2e\xeb\x9b\x34\x85\xee\x97\x79\xb6\xe0\xb4\x52\x23\x3e\x65\xc8\x6d\xd1\x4f\x14\x89\xde\x94\xb6\x70\x72\x7d\x3d\xe9\x0f\x6e\xe8\xa4\xa8\xdd\x56\x9c\x4a\xdb\xef\xc3\xcb\xf3\x77\x0d\x37\xe7\x7f\x8e\xcf\x6f\x47\x93\x41\xbf\x17\x14\x69\xc3\xce\xcd\xc9\x55\x7f\x78\x59\x6f\xb9\x1d\x9d\x9c\xfd\xd1\x0b\x38\x46\x4c\x87\x07\xbf\x90\x81\x67\x54\x24\xa8\xc3\x75\xf7\x83\x15\x91\x55\x78\x87\xb7\xaf\x55\x96\x51\x11\x32\x2d\x1e\x49\xa3\x33\x24\xac\xb9\x41\x3d\x57\x74\x58\x61\xa2\x9c\x62\x1c\x30\x48\xd5\x54\x45\xcf\xcd\xe3\x83\xaf\xc7\xdb\x07\x94\x28\x51\x8b\x14\xc2\x9b\x72\xc7\x61\xaa\x66\x5a\xd1\x20\xf8\x8b\x0e\xb6\xc1\xa6\x7c\x6f\x00\x28\x57\x38\x23\xd1\xac\xef\x69\x54\xdb\xe1\x1c\x1b\x8c\x73\x09\x54\x6b\x4b\xa3\xc9\x40\x17\x62\x64\xd4\x0b\x58\xd7\xf6\x8c\xda\x7e\x72\x36\xbc\xba\x3a\x3f\x1b\x4d\x46\x83\xcb\xf3\xe1\x78\xd4\x0b\xbe\xfd\x7f\x19\xa0\x38\x18\x63\x31\x83\x29\x45\x5e\x30\x1d\x19\xd7\x87\x94\x41\x4c\x85\x14\xf6\x79\xd5\x11\x61\xdc\xaa\x1a\xa6\x8f\xad\xde\x30\x2a\xd7\x1c\xd7\xb6\x14\xca\x6c\xc9\xa2\x9c\x78\x4b\x61\x94\xa1\x53\xf2\x3b\x1d\x0f\x2e\xfa\xd7\x74\x5c\x13\xc2\xdb\x0a\x6d\x85\xa5\x29\x11\xfc\x40\xcb\x13\x37\x7f\x79\x6e\x2c\x4d\xb4\x2a\xa4\x23\xe2\x19\x94\x24\x2b\x8c\x36\x74\xfc\xd2\xc7\x75\x5b\xd5\x25\x2d\x8f\x22\xc6\xe0\xc7\x6d\xef\xcb\xd6\x97\xb7\x03\x09\x8e\x8e\x8e\xd6\x00\xfa\x9f\x19\x50\x2b\xa8\xdb\xcd\xee\x6e\x82\x2d\xc7\xea\x4e\x9e\x56\x42\x8b\xa0\x8d\xac\x3b\x15\x29\x39\x5b\x5a\x81\x86\x4c\x76\x83\x6a\x4c\x6c\x41\xac\x5c\xed\x13\xd4\xea\x21\x0f\x6b\x58\xf3\x5c\x5a\x01\x56\x41\xe9\x1e\x0b\xed\x3a\x3c\xa6\x1e\xa4\x56\x27\x85\xb8\xfa\x53\x2f\xaf\x55\xeb\xfd\x48\xc1\x9a\xca\xab\x23\xfa\x88\xd1\xa7\xe2\x6f\x64\x5a\xe8\xdf\xf3\xb6\xb7\xe1\x83\x53\xde\x80\x9b\xbc\xdd\x7c\x6c\xdc\x55\xed\xb3\x6f\x8a\xad\xbc\x3e\xea\xe1\xd7\xdb\x79\x9b\x65\x6f\xd7\xed\xa3\x9a\x37\xee\x58\xe1\x24\xfc\x52\x7b\xdd\xfd\x7a\xff\x1a\xac\x6e\xb2\x4f\x57\xe7\xa3\x0a\xfc\xb4\x04\xcd\x4d\x53\x92\xf0\x83\x7b\x2b\xef\x47\x47\xdf\xfd\xaf\x2e\xb7\xcd\xfc\xcb\x66\xeb\xb4\x20\xbb\x8f\xa0\x52\x44\x18\xd5\xc2\x2b\xf7\x8e\x53\x36\xa5\x5f\xd2\xd9\xd2\x09\x58\xb3\x37\x3d\x9a\x43\xd4\x43\x07\x05\x00\x37\x71\x46\xc3\xfe\xf0\x10\x2c\x2e\xa5\x68\x13\x61\x80\xfe\x52\xe4\x68\x0c\xd3\xcf\x40\x75\xa5\xf5\x05\x02\x77\x5f\x5f\x72\xc1\x9e\x0d\x64\xf4\x31\x01\x1d\x1a\x28\x05\x60\x58\x08\x9b\xb8\xdb\x54\x18\x93\x63\xcd\x6a\xc7\xdd\x4b\x27\xf5\xbe\xdd\x16\xb3\x56\xcd\x83\x77\x9a\xcc\x8d\x3d\x32\xbf\xb9\x0f\xa0\x3d\x8a\x83\x2a\x7a\x5d\x87\xff\x24\xf2\xf2\x80\x3e\x0c\xa5\x69\x85\xbe\x59\x7e\x0e\xf2\xb8\x65\xed\xee\xaf\x9c\xa8\xfe\x26\xa1\xaf\x3f\x08\x0d\x49\xd3\xce\xa4\x9a\x82\x6b\x66\xf7\x50\x7d\x3f\xd4\x13\x7c\xcf\xf7\xe6\x8f\x4d\x21\x76\xf7\x6a\x6b\x15\x2a\x5f\x0f\xf5\xea\xff\x1b\x00\x00\xff\xff\xe6\xb6\x55\xb9\x63\x0b\x00\x00")

func include_buildpack_bash_bytes() ([]byte, error) {
	return bindata_read(
		_include_buildpack_bash,
		"include/buildpack.bash",
	)
}

func include_buildpack_bash() (*asset, error) {
	bytes, err := include_buildpack_bash_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "include/buildpack.bash", size: 2915, mode: os.FileMode(420), modTime: time.Unix(1421538471, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _include_buildpacks_txt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x90\x41\xae\x84\x20\x10\x44\xf7\x9e\xc2\x0b\xf8\x8d\xe0\x57\x33\xb7\x69\x9a\x56\x54\x14\x82\x40\xe2\xed\x67\x63\x46\xb6\x5d\x1b\x56\xef\x55\xd1\x26\x46\x7f\x7d\xda\x76\x59\xa3\x49\xea\x0f\xdd\xd1\x1a\x0a\x6e\x4f\xcf\xd3\xa8\xb4\x5a\xed\x01\xf7\x06\xad\xdb\x52\xa0\xfa\x89\x42\xa1\x66\x3d\x55\x0c\xc3\xe2\xea\x32\x4a\x0c\x1d\x80\x62\x19\x02\x68\xfb\x9b\x50\x8f\xbd\x9c\x47\x89\x1c\xc3\x06\x19\x8a\x0d\x59\x4a\x0e\x7d\x24\x1b\xd7\x97\x46\xad\x09\x65\xcf\x31\x9c\x4e\xd3\x76\xbd\xfd\x03\x8b\xf6\xc6\x97\x17\xcc\x3d\x6b\xbd\xb7\x70\x17\x34\x12\x69\x9a\x06\x96\xe1\x8e\xc6\x9d\x6f\xff\xbf\xe0\xd0\x21\xa9\xb2\x3f\x77\x62\xe4\xe0\x17\x82\x85\xf2\xf3\x5d\xf5\x0d\x00\x00\xff\xff\xc2\x19\x60\x5e\xbf\x02\x00\x00")

func include_buildpacks_txt_bytes() ([]byte, error) {
	return bindata_read(
		_include_buildpacks_txt,
		"include/buildpacks.txt",
	)
}

func include_buildpacks_txt() (*asset, error) {
	bytes, err := include_buildpacks_txt_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "include/buildpacks.txt", size: 703, mode: os.FileMode(420), modTime: time.Unix(1420918764, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _include_cedarish_txt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4a\x4e\x4d\x49\x2c\x32\x34\xe1\x02\x04\x00\x00\xff\xff\x9b\xf5\x9f\x6a\x08\x00\x00\x00")

func include_cedarish_txt_bytes() ([]byte, error) {
	return bindata_read(
		_include_cedarish_txt,
		"include/cedarish.txt",
	)
}

func include_cedarish_txt() (*asset, error) {
	bytes, err := include_cedarish_txt_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "include/cedarish.txt", size: 8, mode: os.FileMode(420), modTime: time.Unix(1421543477, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _include_cmd_bash = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x54\x41\x6f\x9c\x3c\x10\x3d\xc3\xaf\x98\xcf\x71\xa2\xe4\x80\xf8\x58\xf5\x44\xb4\x55\xa2\xb6\xb7\xb6\x97\x1c\xc3\x46\x72\xc0\x04\x14\xaf\x59\x61\xd8\xa6\x22\xfc\xf7\xce\x18\x9b\x40\xb2\xbd\xf4\x04\x9e\x19\xcf\x7b\xf3\xfc\xec\xb0\x90\xb9\x12\xad\x84\xe8\x16\xbe\xfc\xf8\x7a\x17\x86\xf9\xbe\x88\x54\x6d\xba\xcb\x2b\x18\xc2\xc0\xa7\x0b\x69\xf2\x2d\xfb\x8e\x71\x03\xe2\x28\x6a\x25\x1e\x95\x84\xbc\xd9\xef\x85\x2e\x0c\x7b\x2b\xd4\x66\xcb\x78\x82\x01\xdf\x27\x7a\x96\xbf\x0d\x30\xae\x0d\x83\x57\x30\xb2\x00\x66\x62\x5c\xa5\x71\xcc\xc2\xf1\x0d\xcf\xd6\xad\x41\xe7\x5e\x65\xd3\xc2\x33\xd4\x1a\xdb\x0c\xff\x11\xcd\xfb\x9b\xdd\xc8\xae\xa1\x68\xc2\x20\x90\x79\xd5\x60\xe2\x99\x48\x34\x5a\x22\xc8\x53\x2b\x0f\xc0\x1e\x08\xc4\x62\x36\x6d\xb7\x42\xd2\x0e\xe7\x5f\xda\x46\x47\x48\xdf\xf5\x94\x2f\x07\x5c\x9d\xd2\xeb\x9b\xcd\xa0\x62\x50\xf6\x3a\xef\xea\x46\x83\xa0\x95\xd3\x6d\x21\x5b\xa9\xed\xa8\x98\xc6\xef\xb0\x49\x23\x9e\x8c\x98\x56\x4d\x2e\x94\xd5\xc1\xa9\xa0\x89\x2e\xbf\x5c\x8c\x72\xb5\xe6\x5b\x6a\xb6\x54\x20\x62\x70\xf1\x19\xe2\x42\x1e\x63\xdd\x2b\x05\x17\x17\x93\xaa\xda\x8d\x15\x06\x76\x6e\x3a\x9e\x94\x0f\xc2\xc4\x67\xf8\x17\xc5\x23\xdb\x6d\x6d\xaf\xf5\x8c\xb3\x72\xef\x4e\xc8\x8d\xcb\x37\xd8\x55\x1e\x91\x31\x06\xa9\x10\x90\xd7\x4a\x91\x8c\x71\xfa\x66\x58\x67\x0d\xa2\x0d\xf0\x04\x32\x96\xf1\x9b\x0c\x85\x0f\x83\xd1\x39\x67\xc2\x83\xe9\xf8\x1d\xc5\xc4\x92\x4a\x66\x4e\x9e\xcc\x9b\x48\x98\xbc\x06\x53\xd5\x65\x07\x3e\x8c\x85\xab\xf8\xeb\x2b\x74\x6d\x2f\x7d\xda\x74\xa2\xeb\xcd\xf6\xff\x30\xa8\x4b\xf0\xaa\xce\x6e\xb5\x32\x3e\x70\x8c\x67\x7c\xa5\xe3\x35\x74\x95\xd4\x38\x04\x1f\x16\xfa\x61\x1d\xdb\x8d\xb8\xfb\x86\x74\x50\x06\x51\xa8\xed\xfd\x3d\x86\x28\x07\xbb\xdd\xbc\xd1\x9d\xd7\xcf\x06\x4c\x9f\x57\xde\x11\x29\xd8\x42\xca\x3b\x66\x1b\x3a\x5a\xe5\xbb\x10\xad\x8f\x4d\xf8\x65\xa9\x23\xd2\x75\xaa\xb8\xa2\xfd\x65\xed\x3c\x31\x5b\xe3\xf6\xc3\xb5\x4d\x6d\x21\xba\x0a\x31\xd7\xbe\x72\x8d\x9c\xb5\x82\x43\x5b\xeb\xae\x04\x06\x70\x1e\x6d\x3e\x19\x38\x37\x19\xda\xcc\x0d\xb5\x82\xff\x28\xc7\x44\xc7\xc2\x98\xfe\xf1\x14\x12\xd5\xcd\x50\x0b\xac\xf7\x68\xd3\xf6\xbf\x00\x62\x26\xf5\x15\x33\xe8\xe4\x70\xff\xf1\x6a\xbc\xd4\x1d\xf0\x49\xde\x90\x74\x72\x76\xaa\xa4\x3a\x9c\xba\xc4\x77\x55\xf3\xcb\x00\x65\x91\x39\x8e\xb1\x17\xf6\x22\xd3\x40\xa7\x6e\xb2\x68\x9f\xc8\x89\x64\x01\x7f\x6a\x14\x5a\x9c\x1b\x4d\xe6\x65\xa7\xb1\xad\x21\xe9\x07\x5f\x99\x33\x50\x02\x45\xc1\x1d\x53\xd9\xc2\xdb\x03\xb5\x89\xcf\x69\xd2\x98\x5e\xa9\x29\xa8\x31\x04\xeb\x35\xc4\x11\x5e\xa3\xc5\x76\xfb\xb8\x9c\x38\x19\xc7\x44\x47\x34\x97\x7b\x3b\x92\xd9\xb9\xee\x7e\xda\x97\x87\x44\x5a\x5c\x4b\x2f\x97\x55\x25\xfc\x13\x00\x00\xff\xff\xd3\x23\x50\x2b\x44\x06\x00\x00")

func include_cmd_bash_bytes() ([]byte, error) {
	return bindata_read(
		_include_cmd_bash,
		"include/cmd.bash",
	)
}

func include_cmd_bash() (*asset, error) {
	bytes, err := include_cmd_bash_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "include/cmd.bash", size: 1604, mode: os.FileMode(420), modTime: time.Unix(1420918633, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _include_fn_bash = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x51\x41\x6e\xc2\x30\x10\x3c\xc7\xaf\x18\xad\x22\x01\xaa\xa2\x08\xae\x34\x3d\x56\xea\x1b\x28\x07\xcb\xac\x89\xd5\xd4\x89\x6c\x03\xaa\x28\x7f\xef\x1a\xd2\x92\x43\x55\x55\xb9\x64\x77\x66\x67\x76\xd6\xca\xfa\x4a\x87\x7d\x9c\x2f\x70\x56\xc5\x8e\x4d\xa7\x03\x63\xc7\xd1\x34\xf4\xe2\xe3\xc0\x26\x41\xc3\x1e\xbc\x49\xae\xf7\xb3\x08\x21\x1f\xde\xd9\xa7\x48\xaa\xe8\x7a\xa3\xbb\xdc\xe9\x9c\xe7\xa6\x9c\xa7\x8f\x81\x51\x2e\xf1\x89\x7d\xe0\x01\xdf\x6a\x63\x59\x1d\x41\x53\x03\x12\xa0\x65\xbd\x43\xb5\x5c\xa8\x82\x4d\xdb\xa3\x62\x50\x79\x1e\x05\xeb\x1a\x35\xbd\x7a\xba\x64\xa2\x3e\xbd\xa1\x7a\x6e\x30\xab\x9b\xfa\x3c\x04\xe7\x13\xe8\x91\xca\x25\x3d\xd1\x65\x26\x78\x0a\xc8\x5c\xc8\xa7\x2e\x2a\xa7\xca\x16\xff\x4e\x95\xa1\xe0\x86\x5c\x51\x1e\xc8\x44\xf9\xe1\xa3\xe4\xa3\x5f\x82\x45\x33\x59\x9e\xd6\xb8\x6e\x5f\xe6\xfe\xe8\xee\xbc\xed\xff\x70\x8f\x13\x7b\xba\x73\xac\x6f\x72\x26\xc4\xb6\x3f\xc5\xfe\x10\x0c\x4b\xbd\xa2\xf1\x3a\x54\x5a\x8f\x72\x3e\xbe\x18\xa4\x5a\xfc\x40\xb8\x01\xd7\xcd\x26\x80\x2a\x9c\xc5\x66\x23\xa3\x77\x49\xc2\x76\xbb\x46\x6a\xd9\xab\xa2\xb8\x25\x13\x5d\x39\xa1\x76\x1d\x2a\x8f\x87\x95\xf4\x6f\xc3\xd6\x49\x9c\xaf\x00\x00\x00\xff\xff\x5c\xaf\x12\xe0\x23\x02\x00\x00")

func include_fn_bash_bytes() ([]byte, error) {
	return bindata_read(
		_include_fn_bash,
		"include/fn.bash",
	)
}

func include_fn_bash() (*asset, error) {
	bytes, err := include_fn_bash_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "include/fn.bash", size: 547, mode: os.FileMode(420), modTime: time.Unix(1420918633, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _include_herokuish_bash = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x55\x6d\x6f\xdb\x36\x10\xfe\x2c\xfd\x8a\x2b\xe7\xd4\x4d\x00\xc5\x58\x56\xec\x43\x02\x0d\x73\x32\xb7\x29\x96\xa5\x46\xdd\x74\x18\x92\xc2\x60\xc4\xb3\x4c\x44\x22\x05\x92\x4a\x9d\x25\xf9\xef\x3d\xea\xcd\xb2\x9d\xf8\x93\x78\xcf\x73\x2f\xbc\x7b\x78\x0e\xe5\x02\xae\xaf\x81\x0d\x4e\xc7\xb3\xf3\xf9\xb7\xc9\x97\xd9\xa7\xcb\x0f\x9f\x19\x44\x99\x03\xf6\x9e\xc1\xf7\xef\x27\xe0\x96\xa8\xc2\x00\x93\xa5\x06\xf6\xe6\x0d\xfc\xa7\x4b\x03\xf6\xc1\x3a\xcc\xe1\x94\xdb\x25\x48\x0b\xba\x74\xa0\x17\x20\xb8\xc3\x63\xe8\xc5\xfa\x7c\xc9\x7a\x9e\xd3\x0c\xb9\x45\x28\x8b\xd4\x70\x81\xe0\x74\xed\xff\x1e\xb4\x81\xd4\x20\x39\x9b\x43\xcf\x5f\x49\x07\x47\xe1\x42\x86\x21\x19\x85\x56\xd9\x03\xf0\xa2\x98\x17\xdc\x2d\x63\x36\x78\x1c\x4f\xa7\xf3\xe9\xf8\xeb\xf9\x71\x34\x22\xf3\x33\x5b\xb3\x50\xdd\x77\xac\xc9\xe5\xb7\x96\xe5\xf2\x62\x44\x50\x9f\x79\x5b\xca\x4c\x74\xdc\xd3\xab\x4f\x17\x7f\xf5\xd9\x15\xdc\xe7\x27\x3c\x59\x62\xc7\x3f\x1b\x9f\x9d\x4f\xfa\xfc\x0a\xde\x89\x5f\xf0\xe4\x6e\x33\xc7\x74\x7c\xf6\xf7\x4e\x1e\x4f\xb3\xe4\xdc\xcb\x86\x82\x1b\x69\x97\xf3\x7b\x34\x56\x6a\x45\xfe\xef\xb8\xb5\xe8\xa2\x84\x3b\x90\x2a\xc9\x4a\x81\xa3\x96\x75\xe8\x56\x6e\xbf\xef\x6e\xb3\x32\xed\xf2\xce\x2e\xae\x3e\xf6\x53\x7a\xf0\xd0\xa5\xff\xfb\x84\x02\x93\x8c\x1b\x9a\x88\x2a\x8c\xbc\x97\x19\xa6\x28\xe6\xa5\x45\x13\x33\xa5\x6f\xb5\x78\x60\x2f\x53\x52\xa3\xcb\xc2\x73\xaa\x0f\x0a\x84\xca\x96\x06\x23\x9f\xd3\xbe\xdb\x87\xc7\x30\xc8\xef\x84\x34\x10\x15\x70\x13\x06\x01\x1b\xb4\xf3\x63\xcd\xb9\x9d\x54\x7b\x5e\xcf\xa3\xb5\xac\x3b\xbe\xc1\xe9\x7a\xca\xc2\xe7\x30\xec\x25\x6c\x0b\x15\x68\x93\x98\xcd\x96\xfa\x87\x05\x0f\x03\xb5\xcd\x49\x95\x5a\x52\x16\x5d\x41\xb9\x05\xb0\xbd\xe8\xb7\x23\x0b\xbf\xc0\x9e\xbd\x51\x4d\xf4\x56\x54\x71\xaf\x54\x6f\x2e\x8a\x4c\x52\xd3\x69\x08\x75\x34\x51\x52\x8c\x14\x4c\xa9\x9c\xcc\xb1\x71\x6e\xb5\x16\xf7\xee\x45\xe6\xa9\x77\x20\x95\x2f\xa8\x6d\x16\x16\xa4\x72\x81\x0b\xa9\xbc\xff\xad\x7f\x08\x44\x96\x46\xab\x1c\x95\x6b\x02\xad\x85\x18\x6f\xb4\x24\x60\xff\x6a\x73\xe7\x1d\xa9\xab\x98\x38\x6d\x1e\xda\x4a\x2a\x9a\x6d\xfc\xd7\xc2\x8c\x37\x1a\x48\x91\xdb\xe6\xd5\x52\x86\x4c\xd7\xb7\xea\x27\xee\xd4\x19\x6f\xf7\x1a\xba\xbb\x48\x65\x1d\xcf\x32\x14\x6b\x89\xdb\x6a\x14\x8d\x54\x5f\x1b\x06\x34\x38\x70\x25\xc0\x96\x45\xa1\x8d\xa3\x20\xad\x55\xaa\x85\xee\x56\xc5\x12\x8d\xbe\x2b\x49\xd9\x2d\x4c\x3b\xe5\xb1\xd9\x27\xc7\x91\x40\xff\x92\x1b\x6a\xa2\x73\x2a\x50\xde\x66\xd8\x3d\x1a\x22\x6f\xbf\x9f\x97\xe8\xeb\xf2\x8f\x09\xde\x7d\x5d\x6b\xdc\xbf\x2f\x78\x22\x1d\x09\x18\xda\xd1\xe1\x41\x5d\xde\xcd\x68\x34\x1a\x92\x79\xc5\x4d\x4a\x4a\x6b\x94\x05\xb0\x17\x1d\xfd\x6e\x6b\x65\xf9\xb6\x38\xe9\x32\xac\x9b\x52\x95\x30\x18\xde\xe0\xf5\xaf\x1f\x23\xff\xfb\x63\x08\x83\x03\x4f\x92\x4a\x90\x06\x6a\xd6\x8f\x25\xa9\x05\xfc\x5b\x86\x4c\x2a\x3c\x01\xa1\x69\x40\xed\x9a\xf6\x26\x06\x71\x0c\x51\x74\x40\xcb\x19\x9e\x9e\xb6\xec\x71\x7c\xd0\x5b\xda\xc1\x46\xd2\x61\x45\x23\x2b\x66\x16\xb7\x41\xa8\x7e\xc3\x36\x16\xc1\xb4\x80\x03\x5a\x28\xe8\x2b\xec\x3f\xff\xba\x4e\xea\x57\x29\x45\x2a\x05\x79\xec\xec\x0f\x12\xcc\xe0\xcf\xea\xfe\x39\x97\xaa\x73\x80\x08\x35\x14\xb2\xc0\x05\x97\xd9\x49\x5d\xf9\xd7\x2f\xe3\xb3\x89\xff\xa3\x81\xb7\x6f\xa1\xe2\xac\xc2\x30\x48\x72\x11\xe1\xca\x8b\xa4\x7a\x76\x76\xc3\xd2\x4c\x75\x83\x16\x29\xbb\x1e\x29\xb0\x2b\x7a\x5e\x5e\x69\x8d\x5c\x37\xc4\xda\x0f\xd5\xd9\xa3\xea\xeb\x15\xac\x89\xf2\x0a\x9a\x49\xeb\x76\x6a\xf1\x6b\x16\xd8\x3f\x5c\xf1\x14\xfd\xbf\x57\xb7\x45\x3c\xb0\x55\x84\x37\x45\x32\xf7\xdf\xbb\xf6\x14\x15\x1a\xfa\x6b\xdc\x45\xea\xef\x9d\xcc\x85\xd1\x89\xdf\x38\x75\x13\xa6\xcd\xc9\x56\xed\xa0\xb5\xe5\x8b\x01\x7a\x07\x39\x9d\xb7\xea\x68\x3d\x23\xba\xed\x56\x29\x1d\x84\x2b\x4c\x5e\x46\x0a\x6e\xbc\xaa\x08\xf4\xbb\x8d\x0d\x66\x93\x8b\x0f\x8c\x06\x00\x24\xa5\x51\x15\x71\x3f\x08\x36\x53\x54\x2a\x39\x39\xf1\x04\x1f\xb7\x8f\xfb\x73\x0f\xae\xba\x4d\xf8\xd6\xbc\x2a\xf0\x80\xec\x55\x45\x74\x79\x56\x2b\x8f\xcc\x68\x79\x12\x3e\xff\x0c\x00\x00\xff\xff\x29\xf1\x79\xc9\xe0\x08\x00\x00")

func include_herokuish_bash_bytes() ([]byte, error) {
	return bindata_read(
		_include_herokuish_bash,
		"include/herokuish.bash",
	)
}

func include_herokuish_bash() (*asset, error) {
	bytes, err := include_herokuish_bash_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "include/herokuish.bash", size: 2272, mode: os.FileMode(420), modTime: time.Unix(1421543369, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _include_procfile_bash = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x95\xdd\x4f\xe3\x38\x10\xc0\x9f\x93\xbf\x62\x14\x45\xd0\xde\x61\x02\xf7\x78\xa8\xe8\x4e\xe2\x74\xbc\x00\x2b\x5e\x59\x54\xb9\xf1\x34\xb1\x9a\xc4\x59\xdb\x29\xb0\x2c\xff\xfb\xfa\x2b\x6d\x4c\xcb\x53\xe3\xf1\x7c\xfc\xe6\xc3\xd3\xb4\x97\xa2\x5c\xf3\x06\x49\x4f\xa5\xc2\xd9\x1c\xde\xd3\x84\x61\xd9\x50\x89\xc0\x50\x95\x8b\xec\x7f\xd4\x50\x8a\xb6\xa5\x1d\x03\xa5\x25\xef\x2a\x58\x0b\x09\x14\xac\x29\x2a\x05\xfa\xad\x47\x58\x4b\xd1\xc2\xb7\xe0\x2c\xdb\xfb\xb0\x97\x8b\x2c\xbf\x34\xa2\x92\x6a\xc8\x72\xda\xf7\xcb\x9e\xea\xba\xd8\x29\xc3\x2f\x78\xa3\x6d\x43\x2a\xb4\xf7\xd6\x20\x4b\x3f\xd2\x3d\x99\xd2\x54\xea\x63\x64\x8f\x43\x17\x43\x8c\x98\x11\x0c\xe8\x5a\x8a\xa1\xaa\x01\x5f\xb1\x3c\x4e\xb6\x0b\x65\x55\x0c\xc3\x2c\xae\xca\x48\x35\x8f\xb9\xac\xf2\x57\x58\x54\x81\x34\x24\xa2\x3d\x83\xa1\xeb\x25\xdf\x1a\x83\x0a\x19\x0c\x0a\x25\xbc\x70\x5d\xc3\x2d\x4a\xb1\x19\x48\xc3\x37\x08\xd8\x6d\x6d\x7d\xd8\xa4\x3c\x53\x2a\xef\x89\xff\x44\x62\xcd\x27\x17\x0a\x35\xa9\x45\x8b\x13\x51\x23\x28\x23\xc6\xdf\x67\x91\x39\xd9\x43\x9a\x44\x38\xc5\x8a\x77\xc5\x8a\xaa\x1a\x88\xcb\x1b\xb7\xb4\x01\x2c\x6b\x01\xf9\x3f\x9f\xb2\xb5\x15\x50\x3e\x5d\xcd\xb5\x29\x6b\x76\xc3\x55\x29\xb6\xe8\x26\x62\xda\x06\x65\xd8\xf9\x1a\x9e\x9e\x80\xac\x8f\x37\xfc\xf9\xf9\xca\x74\x05\xbb\x34\x49\x1a\x51\x9a\x90\xce\xcc\x9c\xdc\xaf\x69\xca\xcc\xce\xca\xa1\xe5\x38\x29\x1b\x7c\x53\xe6\xfb\x95\xca\x4a\x39\x5c\xc3\x9a\x24\x8e\x3b\xdb\xe9\x86\xa6\x04\x26\x20\xd7\x90\xbf\xbb\xcf\xa2\x80\xe2\x0c\x3e\xac\x89\x44\x3d\x48\x83\xb1\xe6\x3b\x64\x35\x45\x3e\x97\xd8\x20\x55\xc7\x90\x19\xae\xe9\xd0\xe8\xe5\x88\x1e\x9d\x0f\x53\x18\x3d\x45\x29\x8c\x36\xa1\x7a\xde\xf6\x30\x31\x83\x95\xe5\x91\x7f\xcb\x03\x27\x27\xf0\xdd\xdc\x86\xbc\x6f\xfc\x7d\xdc\x09\xf7\x52\x73\x65\x42\x97\x1a\xd9\xb2\xa3\x2d\xfa\x42\x44\xde\xbe\x28\x88\xf7\x7b\x2f\x0e\x5c\x0e\x1d\x8b\x67\x63\x1c\x3a\x3f\x1e\xa1\x90\x76\x9a\x8d\xcc\x4f\xf3\xb4\x7e\x96\x09\x81\x77\x90\xcf\x1a\x05\x3b\x9d\xf9\x15\x30\xe1\xf2\x79\xed\x85\xb4\xab\x00\x17\xa1\x8a\xa3\x4a\x91\xa3\x2b\x08\x13\x1d\x3a\xc6\x03\x88\x30\xe6\x1e\x44\xd5\xa2\xd7\xb6\xa3\xdd\xd0\x34\x55\x23\x56\x69\xd2\x6e\x18\x97\x40\xfa\xa8\xc9\xc1\xe8\xdc\x64\xe5\xe0\xdc\xf8\x58\xbe\x23\x2a\xc5\x1f\xe7\xaa\x0e\xa4\x4a\x0c\xb2\xb4\xdb\x61\xdc\x79\x0e\x2b\x44\x1d\x26\x51\x6b\xf7\xc2\x64\xbc\xd5\xc2\xdb\xf5\xa8\x21\xe7\xdb\x87\xbb\xff\x16\xd1\x12\xb0\x2f\xbe\x15\x0c\x88\x53\x9e\x2e\x08\xf3\x3d\x7d\xcb\x4b\xab\x99\xc1\x35\x14\x0c\xb7\x85\x8d\x0d\x7f\x5d\x9f\x5c\x9a\xb5\x52\x8b\x97\x0e\xc8\xe3\x31\xfd\xbf\x63\x51\x65\x16\x65\x9f\x45\x5b\x68\x8a\x1c\xef\x21\x0f\xee\x1f\x83\x3d\x73\x66\xa7\x7e\xf6\xf8\xef\xfd\xcd\xc3\xdd\x9f\x97\x17\x17\x17\x73\xdb\xac\xbd\x82\x9d\xbe\x45\x36\xe4\xef\x5e\xdb\xcc\x5b\x9a\x50\xc6\x5c\x50\x93\xdf\x8f\x81\x9b\x3f\x00\x42\x2a\x6e\x27\xc7\xeb\x64\xe1\xcb\x9a\x66\x4e\xdb\x2d\x50\x3b\xf6\x84\xa8\x1a\x4d\x92\xfb\x15\xe6\xa5\x8c\x2b\xba\x6a\xd0\x8c\x02\x55\xea\x45\x48\x16\xe4\xa6\xb1\x25\x92\x15\x65\xee\x11\x78\x59\x27\x48\x29\x91\x6a\xf4\xc5\xf5\xc2\x21\x8a\xef\x65\xd5\x31\x19\x96\x42\xc1\xe9\x69\x38\x7a\x7c\xff\x7d\xd0\x2a\x2b\x8e\x32\x89\xf7\xb0\xeb\xc5\x22\x52\x38\xec\x4b\x74\xff\xf1\x3b\x00\x00\xff\xff\x86\xee\xe1\xff\xb9\x07\x00\x00")

func include_procfile_bash_bytes() ([]byte, error) {
	return bindata_read(
		_include_procfile_bash,
		"include/procfile.bash",
	)
}

func include_procfile_bash() (*asset, error) {
	bytes, err := include_procfile_bash_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "include/procfile.bash", size: 1977, mode: os.FileMode(420), modTime: time.Unix(1420918633, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _include_slug_bash = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x53\x5b\x8b\xd4\x4c\x10\x7d\x4e\x7e\x45\x7d\x21\xb0\x33\x0f\x3d\xf3\x8d\xaf\x12\x41\x56\x91\x05\x51\x71\x67\x40\x58\x97\xa1\x4d\x6a\x92\x86\x9e\x74\xd3\x17\x1d\xa3\xfe\x77\xab\x73\xd9\x24\x3b\xb3\x8b\x79\x4b\x5d\x4e\x9f\x3a\x55\x27\xb6\xd2\x97\x4c\x1c\xb5\x32\x6e\xb1\x84\x5f\x71\x54\x60\x2e\xb9\x41\x28\xd0\xe6\x59\x72\xd3\x66\x80\x43\xd9\x08\xad\xb1\x80\x50\x0f\x8e\x9b\x6f\x5c\x4a\x38\x18\x75\x84\xdd\xe7\xf7\xa0\x0c\xdc\x6e\xdf\xdc\x7c\x80\x64\x04\xf0\x46\x66\x49\xba\xa1\x08\xd6\xd6\x1b\x64\x9a\xbb\xca\xc6\x91\x38\xc0\xdd\x1d\x24\xe9\x42\x5a\x60\xaf\x21\xe5\x5a\xef\x43\x6a\x99\xc0\xfd\xfd\x4b\x70\x15\xd6\x71\x14\x19\x74\xde\xd4\xb0\xa1\x6e\x39\x74\x10\xe2\xac\x26\xa7\x00\x30\x42\x61\x54\x6d\x7e\xc2\x8b\xa1\xe6\x77\x60\x08\xec\xd4\x5c\x53\x64\xc0\x0f\x44\xa4\xc5\xd0\xc7\xdd\x93\x25\x07\x11\xff\x89\x3b\x55\x4a\xac\xd1\x70\x87\x97\x74\x79\xd7\xe7\x9e\x55\x86\x68\x02\x71\x34\x58\x93\x82\x5a\x9f\x29\x21\x55\xce\x25\xe4\xea\xa8\x0d\x5a\xbb\x57\xda\x09\x55\x67\x09\x6b\x92\x56\xa5\x1f\x95\xc8\x2b\xd0\xa2\x6c\xe0\x15\xac\x0b\xfc\xbe\xae\xbd\x94\xe3\xf4\x67\x7d\xcc\x5b\x64\x43\x98\x69\xa3\x4a\xc3\x8f\x59\x00\xe8\x06\xeb\x1f\x0c\x44\x45\x59\x2b\x83\x7d\xeb\xb0\x13\x76\x98\x68\xb1\x5e\x8d\x75\x33\xd5\xcf\xda\xe9\xe5\x2f\x70\xb9\xaf\x7b\x36\x28\x9d\x3e\xa2\x0b\xe9\x19\x0e\x7c\x25\x74\xc6\xf0\x94\x4b\x5f\x60\x76\xb5\x2a\x85\xbb\xea\x82\xb3\x25\x75\xa1\x3c\x90\x0d\x18\x0f\x41\xa0\x2f\x5a\x4d\xa7\xdc\x5b\xd1\x20\x1d\xe1\xa2\xf0\xc0\x6e\x2b\x18\xeb\x69\xff\xb9\x77\x34\xf1\x66\x49\x24\x9d\x70\x12\x21\xb9\x26\x8a\x42\x0e\xab\x0c\xbd\x20\x6c\xdf\x14\xfe\x92\x87\xd3\xc0\xd3\x53\x86\x79\xdb\x66\x60\xb8\x9d\x47\x67\xe1\x54\x6b\x97\xc5\xa7\xdd\x76\xd9\x9b\xe6\xe3\x6e\xfb\xcf\xa6\xf9\xaf\x5b\xd1\x64\xea\x8b\x8e\x09\x9a\x3f\xef\x99\xff\x5b\xdb\xa8\xf1\xaa\x26\x1e\xa2\x65\x12\x3d\x60\xdb\xf9\x4b\x1d\xd4\xcc\x43\xd3\x7c\xe7\x9c\xbf\x01\x00\x00\xff\xff\xba\x18\xfa\x9a\x4f\x04\x00\x00")

func include_slug_bash_bytes() ([]byte, error) {
	return bindata_read(
		_include_slug_bash,
		"include/slug.bash",
	)
}

func include_slug_bash() (*asset, error) {
	bytes, err := include_slug_bash_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "include/slug.bash", size: 1103, mode: os.FileMode(420), modTime: time.Unix(1420918800, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"include/buildpack.bash": include_buildpack_bash,
	"include/buildpacks.txt": include_buildpacks_txt,
	"include/cedarish.txt": include_cedarish_txt,
	"include/cmd.bash": include_cmd_bash,
	"include/fn.bash": include_fn_bash,
	"include/herokuish.bash": include_herokuish_bash,
	"include/procfile.bash": include_procfile_bash,
	"include/slug.bash": include_slug_bash,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"include": &_bintree_t{nil, map[string]*_bintree_t{
		"buildpack.bash": &_bintree_t{include_buildpack_bash, map[string]*_bintree_t{
		}},
		"buildpacks.txt": &_bintree_t{include_buildpacks_txt, map[string]*_bintree_t{
		}},
		"cedarish.txt": &_bintree_t{include_cedarish_txt, map[string]*_bintree_t{
		}},
		"cmd.bash": &_bintree_t{include_cmd_bash, map[string]*_bintree_t{
		}},
		"fn.bash": &_bintree_t{include_fn_bash, map[string]*_bintree_t{
		}},
		"herokuish.bash": &_bintree_t{include_herokuish_bash, map[string]*_bintree_t{
		}},
		"procfile.bash": &_bintree_t{include_procfile_bash, map[string]*_bintree_t{
		}},
		"slug.bash": &_bintree_t{include_slug_bash, map[string]*_bintree_t{
		}},
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

